
default:

  # test configuration starts
  test_configs:
    stackName: '{{prefix}}'
    bucket: '{{buckets.internal.name}}'
    DISTRIBUTION_ENDPOINT: '{{api_distribution_url}}'
    ems_provider: CUMULUS
    esHost: '{{esHost}}'
    streamName: '{{prefix}}-testStream'
    cnmResponseStream: '{{prefix}}-cnmResponseStream'
    awsAccountId: '{{AWS_ACCOUNT_ID}}'
    awsRegion: us-east-1
    AsyncOperationsTable: '{{prefix}}-AsyncOperationsTable'
    asyncOperationRunnerRole: 'arn:aws:iam::{{AWS_ACCOUNT_ID}}:role/{{prefix}}-lambda-api-gateway'
    sqs_consumer_rate: 300
    IngestAndPublishGranule:
      IngestGranuleOutput:
        granules:
          - files:
            - bucket: '{{buckets.protected.name}}'
              filename: "s3://{{buckets.protected.name}}/MOD09GQ___006/2017/MOD/replace-me-granuleId.hdf"
            - bucket: '{{buckets.private.name}}'
              filename: "s3://{{buckets.private.name}}/MOD09GQ___006/MOD/replace-me-granuleId.hdf.met"
            - bucket: '{{buckets.public.name}}'
              filename: "s3://{{buckets.public.name}}/MOD09GQ___006/MOD/replace-me-granuleId_ndvi.jpg"
            - bucket: '{{buckets.protected-2.name}}'
              filename: "s3://{{buckets.protected-2.name}}/MOD09GQ___006/MOD/replace-me-granuleId.cmr.xml"
      IngestUMMGranuleOutput:
        granules:
          - files:
            - bucket: '{{buckets.protected.name}}'
              filename: "s3://{{buckets.protected.name}}/MOD09GQ___006/2016/MOD/replace-me-granuleId.hdf"
            - bucket: '{{buckets.private.name}}'
              filename: "s3://{{buckets.private.name}}/MOD09GQ___006/MOD/replace-me-granuleId.hdf.met"
            - bucket: '{{buckets.public.name}}'
              filename: "s3://{{buckets.public.name}}/MOD09GQ___006/MOD/replace-me-granuleId_ndvi.jpg"
            - bucket: '{{buckets.protected-2.name}}'
              filename: "s3://{{buckets.protected-2.name}}/MOD09GQ___006/MOD/replace-me-granuleId.cmr.json"
      SyncGranuleOutput:
        granules:
          - files:
            - bucket: '{{buckets.internal.name}}'
              filename: 's3://{{buckets.internal.name}}/file-staging/{{prefix}}/replace-me-collectionId/replace-me-granuleId.hdf'
              fileStagingDir: 'file-staging/{{prefix}}/replace-me-collectionId'
            - bucket: '{{buckets.internal.name}}'
              filename: 's3://{{buckets.internal.name}}/file-staging/{{prefix}}/replace-me-collectionId/replace-me-granuleId.hdf.met'
              fileStagingDir: 'file-staging/{{prefix}}/replace-me-collectionId'
            - bucket: '{{buckets.internal.name}}'
              filename: 's3://{{buckets.internal.name}}/file-staging/{{prefix}}/replace-me-collectionId/replace-me-granuleId_ndvi.jpg'
              fileStagingDir: 'file-staging/{{prefix}}/replace-me-collectionId'
    SyncGranule:
      granules:
        - files:
          - bucket: '{{buckets.internal.name}}'
            filename: 's3://{{buckets.internal.name}}/custom-staging-dir/{{prefix}}/replace-me-collectionId/replace-me-granuleId.hdf'
            fileStagingDir: 'custom-staging-dir/{{prefix}}/replace-me-collectionId'
          - bucket: '{{buckets.internal.name}}'
            filename: 's3://{{buckets.internal.name}}/custom-staging-dir/{{prefix}}/replace-me-collectionId/replace-me-granuleId.hdf.met'
            fileStagingDir: 'custom-staging-dir/{{prefix}}/replace-me-collectionId'
  # test configuration ends

  prefix: 'test-cumulus-integration'
  prefixNoDash: TestCumulusIntegration
  useNgapPermissionBoundary: true
  shared_data_bucket: cumulus-data-shared
  api_distribution_url: https://example.com/
  api_lambda_memory: 756
  iam:
    params:
      - name: ResourcePrefix
        value: '{{prefix}}'
  app:
    params:
      - name: CmrPassword
        value: '{{CMR_PASSWORD}}'
      - name: DockerEmail
        value: '{{DOCKER_EMAIL}}'
      - name: DockerPassword
        value: '{{DOCKER_PASS}}'


  apiStage: dev

  vpc:
    vpcId: '{{VPC_ID}}'
    subnets:
      - '{{AWS_SUBNET}}'
    securityGroup: '{{SECURITY_GROUP}}'
    cidrIp: '{{VPC_CIDR_IP}}'

  ecs:
    instanceType: t2.medium
    minInstances: 1
    desiredInstances: 1
    maxInstances: 2
    availabilityZone: us-east-1b
    publicIp: false
    restartTasksOnDeploy: true
    docker:
      username: cumulususer
    services:
      EcsTaskHelloWorld:
        image: cumuluss/cumulus-ecs-task:1.2.5
        cpu: 400
        memory: 700
        minTasks: 1
        count: 1
        maxTasks: 10
        scaleInActivityScheduleTime: 5000
        scaleInAdjustmentPercent: -5
        scaleOutActivityScheduleTime: 10000
        scaleOutAdjustmentPercent: 10
        activityName: EcsTaskHelloWorld
        envs:
          AWS_DEFAULT_REGION:
            function: Fn::Sub
            value: '${AWS::Region}'
        commands:
          - cumulus-ecs-task
          - '--activityArn'
          - function: Ref
            value: EcsTaskHelloWorldActivity
          - '--lambdaArn'
          - function: Ref
            value: HelloWorldLambdaFunction
        alarms:
          TaskCountHigh:
            alarm_description: 'There are more tasks running than the desired'
            comparison_operator: GreaterThanThreshold
            evaluation_periods: 1
            metric: MemoryUtilization
            statistic: SampleCount
            threshold: '{{ecs.services.EcsTaskHelloWorld.count}}'

  activities:
    - name: EcsTaskHelloWorld

  system_bucket: '{{buckets.internal.name}}'

  buckets:
    internal:
      name: cumulus-test-sandbox-internal
      type: internal
    private:
      name: cumulus-test-sandbox-private
      type: private
    protected:
      name: cumulus-test-sandbox-protected
      type: protected
    public:
      name: cumulus-test-sandbox-public
      type: public
    protected-2:
      name: cumulus-test-sandbox-protected-2
      type: protected
    shared:
      name: cumulus-data-shared
      type: shared
    sandbox-dashboard:
      name: cumulus-dashboard-sandbox
      type: shared
    sit-dashboard:
      name: cumulus-dashboard-sit
      type: shared

  cmr:
    username: '{{CMR_USERNAME}}'
    provider: CUMULUS
    clientId: 'cumulus-core-{{prefix}}'
    password: '{{CMR_PASSWORD}}'

  stepFunctions: !!files [
    'workflows/helloworld.yml',
    'workflows/cnm.yml',
    'workflows/errorsAndRetries.yml',
    'workflows/sips.yml',
    'workflows/ingestGranule.yml',
    'workflows/syncGranule.yml',
    'workflows/browseExample.yml'
  ]

  apiConfigs:
    backend:
      private: true
      port: 8000
    distribution:
      private: true
      port: 7000

  sns:
    sftracker:
      subscriptions:
        2ndlambda:
          endpoint:
            function: Fn::GetAtt
            array:
              - SnsS3TestLambdaFunction
              - Arn
          protocol: lambda


  urs_url: https://uat.urs.earthdata.nasa.gov/ #make sure to include the trailing slash

    # if not specified the value of the apigateway backend endpoint is used
    # api_backend_url: https://apigateway-url-to-api-backend/ #make sure to include the trailing slash

    # if not specified the value of the apigateway distribution url is used
    # api_distribution_url: https://apigateway-url-to-distribution-app/ #make sure to include the trailing slash

  # URS users who should have access to the dashboard application.
  users:
    - username: aimeeb
    - username: jennyhliu
    - username: jnorton1
    - username: kbaynes
    - username: kkelly
    - username: kovarik
    - username: lfrederick
    - username: mhuffnagle2
    - username: pquinn1
    - username: menno.vandiermen
    - username: matthewsavoie
    - username: mboyd
    - username: jmcampbell


# ------------------------
# CUMULUS team deployments
# ------------------------
cumulus-from-npm:
  prefix: test-npm-integration # used by the integration repo
  prefixNoDash: TestNpmIntegration

cumulus-from-source:
  prefix: test-src-integration # used by the cumulus repo
  prefixNoDash: TestSourceIntegration

cumulus-from-pr:
  prefix: test-pr-integration # used by the PR
  prefixNoDash: TestPrIntegration

cumulus-nightly:
  prefix: nightly # used by the nightly cron job
  prefixNoDash: Nightly

cumulus-sit:
  prefix: cumulus-sit
  prefixNoDash: cumulusSit

  buckets:
    internal:
      name: cumulus-sit-internal
      type: internal
    private:
      name: cumulus-sit-private
      type: private
    protected:
      name: cumulus-sit-protected
      type: protected
    public:
      name: cumulus-sit-public
      type: public
    protected-2:
      name: cumulus-sit-protected
      type: protected

# -------------------------------
# CUMULUS individual deployments.
# -------------------------------

aimee:
  prefix: aimee
  prefixNoDash: aimee

lf:
  prefix: lf-cumulus
  prefixNoDash: lfCumulus

  es:
    name: estest

  buckets:
    internal:
      name: lf-internal
      type: internal
    private:
      name: lf-private
      type: private
    protected:
      name: lf-protected
      type: protected
    public:
      name: lf-cumulus-public
      type: public
    protected-2:
      name: lf-protected-2
      type: protected

lf-test-2:
  prefix: lf-test-2
  prefixNoDash: lfTest2

  buckets:
    internal:
      name: lf-internal
      type: internal
    private:
      name: lf-private
      type: private
    protected:
      name: lf-protected
      type: protected
    public:
      name: lf-cumulus-public
      type: public
    protected-2:
      name: lf-protected-2
      type: protected

lf-int-test:
  prefix: lf-int-test
  prefixNoDash: lfIntTest

  buckets:
    internal:
      name: lf-internal
      type: internal
    private:
      name: lf-private
      type: private
    protected:
      name: lf-protected
      type: protected
    public:
      name: lf-cumulus-public
      type: public
    protected-2:
      name: lf-protected-2
      type: protected

lf-sit:
  prefix: lf-sit
  prefixNoDash: lfSit

  buckets:
    internal:
      name: lf-sit-internal
      type: internal
    private:
      name: lf-sit-private
      type: private
    protected:
      name: lf-sit-protected
      type: protected
    public:
      name: lf-sit-public
      type: public
    protected-2:
      name: lf-sit-protected
      type: protected

kk:
  prefix: kk-test
  prefixNoDash: KkTest
  esHost: https://search-kk-test-es5-bk24w6blilunzp4fc4ma3xwtqu.us-east-1.es.amazonaws.com
  system_bucket: '{{prefix}}-internal'
  buckets:
    internal:
      name: '{{prefix}}-internal'
      type: internal
    private:
      name: '{{prefix}}-private'
      type: private
    protected:
      name: '{{prefix}}-protected'
      type: protected
    public:
      name: '{{prefix}}-public'
      type: public

mth:
  prefix: mth
  prefixNoDash: Mth
  useWorkflowLambdaVersions: false
  buckets:
    internal:
      name: '{{prefix}}-internal'
      type: internal
    private:
      name: '{{prefix}}-private'
      type: private
    protected:
      name: '{{prefix}}-protected'
      type: protected
    protected-2:
      name: '{{prefix}}-protected'
      type: protected
    public:
      name: '{{prefix}}-public'
      type: public
  ecs:
    # amiid: ami-0bc08634af113cccb
    maxInstances: 3
    ssh: true
    keyPairName: mhuffnag
    # efs:
    #   mount: /efs

jl:
  prefix: jl-test-integration
  prefixNoDash: JlTestIntegration
  buckets:
    private:
      name: jl-test-integration-private
      type: private
    protected:
      name: jl-test-integration-protected
      type: protected
    public:
      name: jl-test-integration-public
      type: public
    protected-2:
      name: jl-test-integration-protected-2
      type: protected
    shared-2:
      name: rvl-internal
      type: shared

mhs2:
  prefix: mhs2
  prefixNoDash: mhs2
  buckets:
    internal:
      name: mhs-internal
      type: internal
    private:
      name: mhs-private
      type: private
    protected:
      name: mhs-protected
      type: protected
    public:
      name: mhs-public
      type: public
    protected-2:
      name: mhs-protected-2
      type: protected
    shared:
      name: cumulus-data-shared
      type: shared
  api_distribution_url: '{{API_DISTRIBUTION_URL}}'
  system_bucket: '{{buckets.internal.name}}'

  users:
    - username: '{{EARTHDATA_LOGIN_USERNAME}}'

  AutoScalingPolicyConfiguration:
  GranulesTable:
    enableAutoScaling: false
  FilesTable:
    enableAutoScaling: false

gitc:
  prefix: {{PREFIX}}
  prefixNoDash: {{prefixNoDash}}

  iams:
    ecsRoleArn: 'arn:aws:iam::{{AWS_ACCOUNT_ID}}:role/{{PREFIX}}-ecs'
    lambdaApiGatewayRoleArn: 'arn:aws:iam::{{AWS_ACCOUNT_ID}}:role/{{PREFIX}}-lambda-api-gateway'
    lambdaProcessingRoleArn: 'arn:aws:iam::{{AWS_ACCOUNT_ID}}:role/{{PREFIX}}-lambda-processing'
    stepRoleArn: 'arn:aws:iam::{{AWS_ACCOUNT_ID}}:role/{{PREFIX}}-steprole'
    instanceProfile: 'arn:aws:iam::{{AWS_ACCOUNT_ID}}:instance-profile/{{PREFIX}}-ecs'
    distributionRoleArn: 'arn:aws:iam::{{AWS_ACCOUNT_ID}}:role/{{PREFIX}}-distribution-api-lambda'

  buckets:
    internal:
      name: '{{PREFIX}}-internal'
      type: internal
    private:
      name: '{{PREFIX}}-private'
      type: private
    protected:
      name: '{{PREFIX}}-protected'
      type: protected
    public:
      name: '{{PREFIX}}-public'
      type: public
    protected-2:
      name: '{{PREFIX}}-protected-2'
      type: protected
    shared:
      name: '{{PREFIX}}-data-shared'
      type: shared
  api_distribution_url: '{{API_DISTRIBUTION_URL}}'
  system_bucket: '{{buckets.internal.name}}'

  users:
    - username: '{{EARTHDATA_LOGIN_USERNAME}}'

  AutoScalingPolicyConfiguration:
  GranulesTable:
    enableAutoScaling: false
  FilesTable:
    enableAutoScaling: false

mvd:
  prefix: mvd
  prefixNoDash: mvd
  buckets:
    internal:
      name: '{{prefix}}-internal'
      type: internal
  bucket: '{{prefix}}-internal'

mvd-dev:
  prefix: mvd-dev
  prefixNoDash: mvdDev
  buckets:
    internal:
      name: 'mvd-internal'
      type: internal
  bucket: 'mvd-internal'

jc:
  prefix: jc
  prefixNoDash: jc
  # ecs:
  #  services:
  #    EcsTaskHelloWorld:
  #      image: '{{ECR_TESTING_IMAGE_ARN}}'
  #      cpu: 400
  #      memory: 700
  #      count: 1
  #      envs:
  #        AWS_DEFAULT_REGION:
  #          function: Fn::Sub
  #          value: '${AWS::Region}'
  #      commands:
  #        - cumulus-ecs-task
  #        - '--activityArn'
  #        - function: Ref
  #          value: EcsTaskHelloWorldActivity
  #        - '--lambdaArn'
  #        - function: Ref
  #          value: HelloWorldLambdaFunction
  #  docker:
  #    username: cumulususer
  #    registry: ecr

mhs:
  prefix: mhs
  prefixNoDash: mhs

mhs3:
  prefix: mhs3
  prefixNoDash: mhs3
  buckets:
    internal:
      name: mhs3-internal
      type: internal
    private:
      name: mhs3-private
      type: private
    protected:
      name: mhs3-protected
      type: protected
    public:
      name: mhs3-public
      type: public
    protected-2:
      name: mhs3-protected-2
      type: protected
    shared:
      name: cumulus-data-shared
      type: shared
  system_bucket: mhs3-internal
  api_distribution_url: '{{API_DISTRIBUTION_URL}}'

jk:
  prefix: jk
  prefixNoDash: jk

jk2:
  prefix: jk2
  prefixNoDash: jk2

mboyd-test:
  prefix: mboyd-test
  prefixNoDash: mboydTest

mboyd-int:
  prefix: mboyd-int
  prefixNoDash: mboydInt

pq:
  prefix: pq
  prefixNoDash: pq
